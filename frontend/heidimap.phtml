
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>Heidi Map</title>
<style>
table {
  font-family: Arial, Helvetica, sans-serif;
  font-size: 10pt;
  border-collapse: collapse;
  <!-- width: 100%; -->
}

td, th {
  border: 1px solid #aaaaaa;
  text-align: left;
  padding: 3px;
}

tr:nth-child(even) {
  background-color: #dddddd;
}
</style>
</head>
<body bgcolor="#FFFFFF" text="#000000" onload='init();'>
<font size=+1 face="monospace">
<div id="Map" style="height: 650px; width: 80%" ></div>
<br>
<input id="togglePolyLayer" type="button" onclick="EnablePolygon()" value="Neue Weide">
<input id="submitPolyLayer" type="button" onclick="PostNewWeide()" value="Ãœbertragen" disabled>
<input id="decDay" type="button" onclick="DecrementDay()" value="-"> Tag <input id="incDay" type="button" onclick="IncrementDay()" value="+">
<input id="decHour" type="button" onclick="DecrementHour()" value="-"> 1 Std <input id="incHour" type="button" onclick="IncrementHour()" value="+">
<input id="decMin" type="button" onclick="DecrementMin()" value="-"> 15 Min <input id="incMin" type="button" onclick="IncrementMin()" value="+">
<input id="decMin2" type="button" onclick="DecrementMin2()" value="-"> 5 Min <input id="incMin2" type="button" onclick="IncrementMin2()" value="+">

<br><br>
<?php
    //Connect to database
    $servername = 'localhost';
    $username   = 'HeidiTracker';
    $password   = '';
    $dbname     = 'Heidi';
    $Fence      = array();
    $Pales      = 0;
    $Track      = array();
    $TrackPnts  = 0;
    $MapToken   = "";
    $DateWasSet = FALSE;

    if (isset($_GET['ID'])) {$TrackerID = $_GET['ID'];} else {$TrackerID = "0001.0001";}
    if (isset($_GET['Date'])) {$OrigDate = $_GET['Date']; $DateWasSet = TRUE;} else {$OrigDate = date('Y-m-d H:i:s');}
    
    $LocalDate    = date_create_from_format('Y-m-d H:i:s', $OrigDate);
    $CurDateUTC   = gmdate('Y-m-d H:i:s', date_timestamp_get($LocalDate));
    $CurDateUTCDB = gmdate('Y-m-d H:i:s', date_timestamp_get($LocalDate) + 25); //take the late measures too
    
    // Create connection
    $conn = new mysqli($servername, $username, $password, $dbname);
    // Check connection
    if ($conn->connect_error) {
        die("Database Connection failed: " . $conn->connect_error);
    }
    //          row    0         1          2         3         4         5           6            7            8          9          10          11
    //                                                                                            Sats       GPShdop     acc1        acc2        Mout 
    $sql  = 'SELECT Longitude, Latitude, Altitude, TimeStamp, Battery, Temperature, ErrorCode, FreeValue1, FreeValue2, FreeValue3, FreeValue4, FreeValue5 FROM TrackerData ';
    $sql .= 'WHERE TrackerID = \'' . $TrackerID . '\' AND TimeStamp <= \'' . $CurDateUTCDB . '\' ';
    $sql .= 'AND Longitude != \'0.0\' AND Latitude != \'0.0\' ';
    $sql .= 'ORDER BY TimeStamp DESC LIMIT 1';

    // 'ORDER BY TimeStamp DESC LIMIT 0,1' -> last
    // 'ORDER BY TimeStamp DESC LIMIT 1,1' -> fore last
    // 'ORDER BY TimeStamp DESC LIMIT 2,1' -> fore fore last

    $PositionResult = FALSE;
    if ($result=$conn->query($sql))
    {
      if ($row=$result->fetch_row())
      {

        $TrackerLongitude = floatval($row[0]);
        $TrackerLatitude  = floatval($row[1]);
        $PositionResult   = TRUE;
        $ErrorCode        = hexdec($row[6]);

        $tz = new DateTimeZone( "UTC" );
        $MeasDateUTC = date_create_from_format('Y-m-d H:i:s', $row[3], $tz);
        if ($DateWasSet != TRUE) {
          $CurDateUTC = gmdate('Y-m-d H:i:s', date_timestamp_get($MeasDateUTC));
        }
        $MeasDate = date('Y-m-d H:i:s', date_timestamp_get($MeasDateUTC));
        if($row[8] < 10) { $Quality = 10; } else { $Quality = $row[8]; }
        $Quality = 10 / $Quality;
        echo '<table>';
        echo '<tr><th>TrID: </th><th>'     . $TrackerID . '</th><th>Batt:</th><th>'  . $row[4]  . '</th></tr>';
        echo '<tr><th>Zeit: </th><th>'     . $MeasDate  . '</th><th>Temp:</th><th>'  . $row[5]  . '</th></tr>';
        echo '<tr><th>Entf: </th><th>'     . $row[11]   . '</th><th>Bew1:</th><th>'  . $row[9]  . '</th></tr>';
        echo '<tr><th>H&ouml;he: </th><th>' . round($row[2],0)    . '</th><th>Bew2:</th><th>'  . $row[10] . '</th></tr>';
        echo '<tr><th>Sats: </th><th>'     . $row[7]    . '</th><th>Quali:</th><th>' . round($Quality,2) . '</th></tr>';
        echo '</table>';
        echo '<br><br>Fehler: ';
        $e = 0;
        if (($ErrorCode & 0x0001) != 0)  { echo 'WRONG_BOOT_REASON'; $e++; }
        if (($ErrorCode & 0x0002) != 0)  { if ($e > 0) { echo ', '; } echo 'GSM_TRANSMISSION_FAILED'; $e++; }
        if (($ErrorCode & 0x8000) != 0)  { if ($e > 0) { echo ', '; } echo 'RECEIVE_DATA_ERROR'; $e++; }
        if (($ErrorCode & 0x0004) != 0)  { if ($e > 0) { echo ', '; } echo 'COULD_NOT_FETCH_GPS_TIME'; $e++; }
        if (($ErrorCode & 0x0008) != 0)  { if ($e > 0) { echo ', '; } echo 'COULD_NOT_FETCH_GPS_POS'; $e++; }
        if (($ErrorCode & 0x0010) != 0)  { if ($e > 0) { echo ', '; } echo 'WRONG_GPS_VALUES'; $e++; }
        if (($ErrorCode & 0x0200) != 0)  { if ($e > 0) { echo ', '; } echo 'IIC_ERROR'; $e++; }

        echo '<br>Status: ';
        $e = 0;
        if (($ErrorCode & 0x1000) != 0)  { echo 'TRANSMIT_REGULAR'; $e++; }
        if (($ErrorCode & 0x0020) != 0)  { if ($e > 0) { echo ', '; } echo 'NEW_FENCE_STATE'; $e++; }
        if (($ErrorCode & 0x0040) != 0)  { if ($e > 0) { echo ', '; } echo 'GPS_ALERT'; $e++; }
        if (($ErrorCode & 0x0080) != 0)  { if ($e > 0) { echo ', '; } echo 'ACC_ALERT'; $e++; }
        if (($ErrorCode & 0x0100) != 0)  { if ($e > 0) { echo ', '; } echo 'ALERT_SMS'; $e++; }
        if (($ErrorCode & 0x2000) != 0)  { if ($e > 0) { echo ', '; } echo 'TRANSMIT_BY_ALERT'; $e++; }
        if (($ErrorCode & 0x4000) != 0)  { if ($e > 0) { echo ', '; } echo 'NOT_TRANSMIT_ALERT_NO_GPS'; $e++; }
        if (($ErrorCode & 0x0400) != 0)  { if ($e > 0) { echo ', '; } echo 'POWER_SAVE_1'; $e++; }
        if (($ErrorCode & 0x0800) != 0)  { if ($e > 0) { echo ', '; } echo 'GPS_LATE_LOCK'; $e++; }
        
      }
      $result->close();
    }

    $sql  = 'SELECT Longitude, Latitude FROM TrackerData ';
    $sql .= 'WHERE TrackerID = \'' . $TrackerID . '\' AND TimeStamp <= \'' . $CurDateUTCDB . '\' ';
    $sql .= 'AND Longitude != \'0.0\' AND Latitude != \'0.0\' ';
    $sql .= 'ORDER BY TimeStamp DESC LIMIT 16';

    $TrackPnts = 0;
    if ($result=$conn->query($sql))
    {
      while ($row = $result->fetch_row()){
        $TrackPnts++;
        $Track[] = $row[0];
        $Track[] = $row[1];
      }
      $result->close();
    }


    $HerdeID = substr($TrackerID,0,4);
    $sql = "SELECT Longitude, Latitude FROM Fence WHERE HerdeID = '{$HerdeID}' AND Active = 1;";
    if ($result = $conn->query($sql)){
      while ($row = $result->fetch_row()){
        $Pales++;
        $Fence[] = $row[0];
        $Fence[] = $row[1];
      }
      $result->close();
    }
   // $sql = "SELECT Token FROM mapbox WHERE No = 1;";
   // if ($result = $conn->query($sql)){
   //   while ($row = $result->fetch_row()){
   //     $MapToken = $row[0];
   //   }
   //   $result->close();
   // }
    $conn->close();
?>
</font>
</body>
<!--><script src="http://www.openlayers.org/api/OpenLayers.js"></script></!-->
<script src="./ol/OpenLayers.js"></script>
<script>
  var conn   = new XMLHttpRequest();
  var map,vectorLayer,selectMarkerControl,selectedFeature;
  var GotPosition = <?php echo json_encode($PositionResult); ?>;
  var lat     =     <?php echo json_encode($TrackerLatitude); ?>;  //getUrlVars()["lat"];
  var lon     =     <?php echo json_encode($TrackerLongitude); ?>; //getUrlVars()["lon"];
  var Pales   =     <?php echo json_encode($Pales); ?>;
  var Fence   =     <?php echo json_encode($Fence); ?>;
  var MapToken  =   <?php echo json_encode($MapToken); ?>;
  var TrackPnts =   <?php echo json_encode($TrackPnts); ?>;
  var Track     =   <?php echo json_encode($Track); ?>;
  var CurDateUTC  = <?php echo json_encode($CurDateUTC); ?>;
  CurDateUTC = CurDateUTC.substr(0, CurDateUTC.indexOf(' ')) + "T" + CurDateUTC.substr(CurDateUTC.indexOf(' ')+1) + "Z";
  var TimeStamp = new Date(CurDateUTC);
  
  var newTimeStampStr = "";
  var TrackerID = <?php echo json_encode($TrackerID); ?>;
  var url     = window.location.href;
  var zoom    =   18;
  var position;
  var polygonLayer;
  var polygon;
  var newWeideLon, newWeideLat;
  var newWeideString = "";

  var fromProjection = new OpenLayers.Projection("EPSG:4326");   // Transform from WGS 1984
  var toProjection   = new OpenLayers.Projection("EPSG:900913"); // to Spherical Mercator Projection
  var cntrposition   = new OpenLayers.LonLat(lon, lat).transform( fromProjection, toProjection);

  var size   = new OpenLayers.Size(30,35);
  //var size   = new OpenLayers.Size(21,25);
  var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
  var icon1  = new OpenLayers.Icon('./img/30x35_Schaf.png', size, offset);

  function getUrlVars() {
    var vars = {};
    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
      vars[key] = value;
    });
    return vars;
  }

  function init()
  {
    document.getElementById("submitPolyLayer").disabled  = true;
    if (!GotPosition) {
      alert("Position konnte nicht ermittelt werden.");
      return;
    } else {
     // alert("Position: " + lat + "; " + lon + "; Zaunspfosten: " + Pales);
    }
    if (url.indexOf('?') > -1){
      url = url.substr(0, url.indexOf('?'));
    }
    //alert(CurDate + ";  " + TimeStamp.toUTCString());

    map = new OpenLayers.Map("Map",{
            controls:
            [
              zoomBar = new OpenLayers.Control.PanZoomBar(),
              new OpenLayers.Control.LayerSwitcher({}),
              new OpenLayers.Control.Navigation(),
              new OpenLayers.Control.OverviewMap(),
              new OpenLayers.Control.Attribution()
            ]
          } );
    if(MapToken == "") {
      var mappy = new OpenLayers.Layer.OSM("MAP", ["https://clarity.maptiles.arcgis.com/arcgis/rest/services/World_Imagery/MapServer/tile/${z}/${y}/${x}"]);
               // ["https://a.tile.openstreetmap.de/${z}/${x}/${y}.png",
               //  "https://b.tile.openstreetmap.de/${z}/${x}/${y}.png",
               //  "https://c.tile.openstreetmap.de/${z}/${x}/${y}.png"]);
    } else {
      var mappy  = new OpenLayers.Layer.OSM("MAP",
                ["https://a.tiles.mapbox.com/v4/mapbox.satellite/${z}/${x}/${y}.jpg?access_token=" + MapToken,
                 "https://b.tiles.mapbox.com/v4/mapbox.satellite/${z}/${x}/${y}.jpg?access_token=" + MapToken,
		 "https://c.tiles.mapbox.com/v4/mapbox.satellite/${z}/${x}/${y}.jpg?access_token=" + MapToken,
                 "https://d.tiles.mapbox.com/v4/mapbox.satellite/${z}/${x}/${y}.jpg?access_token=" + MapToken]);
    }
    var markers      = new OpenLayers.Layer.Markers( "Markers" );
    var marker1      = new OpenLayers.Marker(cntrposition, icon1);

    map.addLayer(mappy);
    map.setCenter(cntrposition, zoom);
    markers.addMarker(marker1);

    if (Pales > 2) {
      var sitePoints = [];
      var siteStyle = {
         'fillColor': "#40ff40",
         'fillOpacity': 0.5,
         'strokeColor': "#40ff40"
      }
      for (var i = 0; i<Pales; i++) {
        var spoint = new OpenLayers.Geometry.Point(Fence[i*2], Fence[i*2+1]);
        spoint.transform(fromProjection, map.getProjectionObject());
        sitePoints.push(spoint);
      }
      sitePoints.push(sitePoints[0]);

      var linearRing = new OpenLayers.Geometry.LinearRing(sitePoints);
      var siteGeometry = new OpenLayers.Geometry.Polygon([linearRing]);
      var polygonFeature = new OpenLayers.Feature.Vector(siteGeometry, null, siteStyle);
      var fLayer = new OpenLayers.Layer.Vector("Zaun");
      fLayer.addFeatures([polygonFeature]);
      map.addLayer(fLayer);
    }

    if (TrackPnts > 2) {
      var trackPoints = [];
      var trackStyle = {
         'strokeWidth': 2,
         'strokeOpacity': 1,
         'strokeColor': "#ff8000"
      }
      for (var i = 0; i<TrackPnts; i++) {
        var tpoint = new OpenLayers.Geometry.Point(Track[i*2], Track[i*2+1]);
        tpoint.transform(fromProjection, map.getProjectionObject());
        trackPoints.push(tpoint);
      }

      var linearString = new OpenLayers.Geometry.LineString(trackPoints);
      //var trackGeometry = new OpenLayers.Geometry.Polygon([linearString]);
      var trackFeature = new OpenLayers.Feature.Vector(linearString, null, trackStyle);
      var tLayer = new OpenLayers.Layer.Vector("Laufweg");
      tLayer.addFeatures([trackFeature]);
      map.addLayer(tLayer);
    }
    map.addLayer(markers);
  }

  function EnablePolygon(){
    polygonLayer = new OpenLayers.Layer.Vector("Neue Weide");
    polygon      = new OpenLayers.Control.DrawFeature(polygonLayer,OpenLayers.Handler.Polygon);
    map.addLayer(polygonLayer);
    map.addControl(polygon);
    polygonLayer.events.register('featureadded',polygonLayer, onAdded);
    polygon.activate();
    document.getElementById("togglePolyLayer").value  = "Reset";
    document.getElementById("togglePolyLayer").onclick  = ResetPolygon;
  }

  function ResetPolygon(){
    polygonLayer.removeAllFeatures();
    document.getElementById("submitPolyLayer").disabled  = true;
  }


  function onAdded(event){
    var polygon=event.feature.geometry;
    var LatLonPoly = polygon.transform( map.getProjectionObject(), fromProjection);
    newWeideString = "";
    newWeideLon = new Array(LatLonPoly.getVertices().length);
    newWeideLat = new Array(LatLonPoly.getVertices().length);
    for (i = 0; i < LatLonPoly.getVertices().length; i++) {
      newWeideLon[i] = LatLonPoly.getVertices()[i].x;
      newWeideLat[i] = LatLonPoly.getVertices()[i].y;
      newWeideString += "&Lo" + (i+1) + "=" + cutsix(newWeideLon[i]);
      newWeideString += "&La" + (i+1) + "=" + cutsix(newWeideLat[i]);
      console.log(newWeideLon[i]);
      console.log(newWeideLat[i]);
    }
    document.getElementById("submitPolyLayer").disabled  = false;
	console.log("Submit on");
  }

 function PostNewWeide(){
    console.log("Post: " + window.location.hostname + "/push_settings.php?ID=" + TrackerID + newWeideString);
    window.location.replace("push_settings.php?ID=" + TrackerID + newWeideString);
 }
  
  function DecrementDay(){
    console.log(CalcDate(-1,0,0));
  }
  function IncrementDay(){
    CalcDate(1,0,0);
  }
  function DecrementHour(){
    CalcDate(0,-1,0);
  }
  function IncrementHour(){
    CalcDate(0,1,0);
  }
  function DecrementMin(){
    CalcDate(0,0,-15);
  }
  function IncrementMin(){
    CalcDate(0,0,15);
  }
  function DecrementMin2(){
    CalcDate(0,0,-5);
  }
  function IncrementMin2(){
    CalcDate(0,0,5);
  }
  function CalcDate(DayInc, HourInc, MinInc){

    var newTime = new Date(TimeStamp);
    newTime.setDate(newTime.getDate() + DayInc);
    newTime.setHours(newTime.getHours() + HourInc);
    if (newTime.getSeconds() > 35) {
      newTime.setMinutes(newTime.getMinutes() + MinInc + 1); 
    } else {
      newTime.setMinutes(newTime.getMinutes() + MinInc); 
    }
    newTime.setSeconds(0);
    var newTimeStampStr = newTime.getFullYear() + "-" + lenTwo((newTime.getMonth()+1).toString()) + "-" + lenTwo(newTime.getDate().toString()) + "%20";
    newTimeStampStr += lenTwo(newTime.getHours().toString()) + ":" + lenTwo(newTime.getMinutes().toString()) + ":" + lenTwo(newTime.getSeconds().toString());
    //console.log("redirect : heidimap.phtml?ID=" + TrackerID + "&Date=" + newTimeStampStr);
    window.location.replace("heidimap.phtml?ID=" + TrackerID + "&Date=" + newTimeStampStr);
  }
  
  function lenTwo(value){
    if (value.length ==1) { return "0"+value; }
    return value;
  }
  
  function cutsix(value){
    var result = new String("");
    result += value;
    if (value >= 100)
    { return result.substr(0,10); }
    else if (value >= 10)
    { return result.substr(0,9); }
    else
    { return result.substr(0,8); }
  }
  
 
</script>
</html>
