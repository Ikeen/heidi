/*
 * heidi-lora.cpp
 *
 *  Created on: 31.01.2022
 *      Author: frank
 */
#include <Arduino.h>
#include "RS-FEC.h"
#include "heidi-debug.h"
#include "heidi-defines.h"
#include "heidi-data.h"
#include "heidi-lora.h"
#ifdef USE_OLED
#include "SSD1306.h"
#ifdef LORA_V1_3_OLED
#define DISPLAY_SDA 21
#define DISPLAY_SCL 22
#endif
#ifdef LORA_V1_1_OLED
#define DISPLAY_SDA 4
#define DISPLAY_SCL 15
#endif
#define DISPLAY_RST 16
#define DISPLAY_ADD 0x3c
SSD1306 display(DISPLAY_ADD, DISPLAY_SDA, DISPLAY_SCL);
#endif
#ifdef USE_LORA

bool SetupLoRa(void){
  _D(DebugPrint("setup LoRa at " + String(BAND/1E6,2) + "MHz ", DEBUG_LEVEL_1);)
  SPI.begin(SCK,MISO,MOSI,SS);
  LoRa.setPins(SS,RST,DI0);
  if (!LoRa.begin(BAND)) {
    _D(DebugPrintln(" failed!", DEBUG_LEVEL_1);)
    return false;
  }
  _DD(DebugPrintln("Configuring LoRa", DEBUG_LEVEL_3);
      DebugPrintln(" - spreading factor: " + String(spreadingFactor), DEBUG_LEVEL_3);)
  LoRa.setSpreadingFactor(spreadingFactor);
  _DD(DebugPrintln(" - signal bandwidth: " + String(SignalBandwidth), DEBUG_LEVEL_3);)
  LoRa.setSignalBandwidth(SignalBandwidth);
  _DD(DebugPrintln(" - code rate: 4/" + String(codingRateDenominator), DEBUG_LEVEL_3);)
  LoRa.setCodingRate4(codingRateDenominator);
  _DD(DebugPrintln(" - preamble length: " + String(preambleLength), DEBUG_LEVEL_3);)
  LoRa.setPreambleLength(preambleLength);
  LoRa.setTxPower(TX_POWER);
  LoRa.disableCrc();
  //LoRa.receive();
  _D(DebugPrintln(".. done", DEBUG_LEVEL_1);)
  return true;
}

void CloseLoRa(void){
  LoRa.end();
  LoRa.sleep();
}

bool waitForACK(uint8_t* code, int* rssi){
  int t = millis();
  if (rssi != NULL) { *rssi = 0; }
  while (millis() - t <= LORA_ACK_TIMEOUT_MS){
    int packetSize = 0;
    while(packetSize == 0){
      packetSize = LoRa.parsePacket();
      if(packetSize == 0) { delay(1); }
      if (millis() - t > LORA_ACK_TIMEOUT_MS) {
        _DD(DebugPrintln("got no ACK [" + String(millis()-t) + " ms]", DEBUG_LEVEL_3);)
        return false;
      }
    }
    if (rssi != NULL) { *rssi = LoRa.packetRssi(); }
    if (LoRa.available() == 2){
      if(LoRa.read() == LORA_ACK_PKG_CODE){
        *code = LoRa.read();
        //_DD(DebugPrintln("got ACK: 0x" +  String(*code, HEX) + " [" + String(millis()-t) + " ms]", DEBUG_LEVEL_3);)
        return true;
      } _DD( else{DebugPrintln("(ACK) got wrong code", DEBUG_LEVEL_3); })
    } _DD( else{DebugPrintln("(ACK) got wrong length: " + String(LoRa.available()), DEBUG_LEVEL_3); })
    while (LoRa.available()>0) { LoRa.read(); }
  }
  _DD(DebugPrintln("got no ACK [" + String(millis()-t) + " ms]", DEBUG_LEVEL_3);)
  return false;
}
void sendACK(uint8_t code){
  uint8_t buffer[2];
  buffer[0] = LORA_ACK_PKG_CODE;
  buffer[1] = code;
  LoRa.beginPacket();
  LoRa.write(buffer, 2);
  LoRa.endPacket();
}


#ifdef HEIDI_CONFIG_TEST
#define TEST_DATA_COUNT 96
t_SendData loRaTestData[TEST_DATA_COUNT] = {
 /* 1 */ { 0x030a560d, 0x00cb970f, 0x0126, 0x543e, 0x5f60, 0x0f19, 0x08d0, 0x0000, 0x07, 0x20, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a55c1, 0x00cb9714, 0x0119, 0x543e, 0x5e9d, 0x0f19, 0x08c3, 0x0000, 0x07, 0x28, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5574, 0x00cb978a, 0x0122, 0x543e, 0x5de0, 0x0f1a, 0x08bd, 0x0000, 0x06, 0x1e, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5605, 0x00cb97b8, 0x0126, 0x543e, 0x5d1d, 0x0f1a, 0x08b1, 0x0000, 0x07, 0x2e, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a55d4, 0x00cb973c, 0x0135, 0x543e, 0x5c5d, 0x0f1d, 0x08a4, 0x0000, 0x08, 0x21, 0x00ae, 0x002e, 0x0000, 0x9f00, 0xf500 },
         { 0x030a5521, 0x00cb96c6, 0x0139, 0x543e, 0x5b9d, 0x0f1d, 0x0891, 0x0000, 0x09, 0x20, 0x004f, 0x0021, 0x0000, 0xf070, 0xf000 },
         { 0x030a5655, 0x00cb9828, 0x0135, 0x543e, 0x5add, 0x0f23, 0x087f, 0x0000, 0x06, 0x2e, 0x0012, 0x0000, 0x0000, 0x00f0, 0x0000 },
         { 0x030a51f4, 0x00cb924a, 0x0079, 0x543e, 0x5a20, 0x0f22, 0x087f, 0x0000, 0x06, 0x28, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5620, 0x00cb963f, 0x00fa, 0x543e, 0x595d, 0x0f23, 0x087f, 0x0800, 0x09, 0x47, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
/* 10 */ { 0x030a56a9, 0x00cb96ee, 0x011c, 0x543e, 0x589d, 0x0f23, 0x0878, 0x0000, 0x09, 0x3a, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5490, 0x00cb96f3, 0x0179, 0x543e, 0x575d, 0x0f23, 0x0872, 0x0800, 0x06, 0x4b, 0x0000, 0x0000, 0x0008, 0x0000, 0x0000 },
         { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x569d, 0x0f25, 0x086c, 0x0818, 0x00, 0x78, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5cd1, 0x00cb99c6, 0x0238, 0x543e, 0x55e0, 0x0f26, 0x086c, 0x0800, 0x06, 0x55, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x5520, 0x0f26, 0x0866, 0x0818, 0x00, 0x78, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a54eb, 0x00cb9647, 0x0000, 0x543e, 0x545c, 0x0f2a, 0x0866, 0x0800, 0x03, 0x5d, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a54e0, 0x00cb96bd, 0x0000, 0x543e, 0x53a1, 0x0f28, 0x085f, 0x0000, 0x03, 0x20, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a55a2, 0x00cb9743, 0x0142, 0x543e, 0x52dc, 0x0f2a, 0x085f, 0x0800, 0x07, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a557c, 0x00cb978d, 0x0000, 0x543e, 0x5220, 0x0f2b, 0x085f, 0x0000, 0x03, 0x27, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5755, 0x00cb9587, 0x0133, 0x543e, 0x515d, 0x0f2b, 0x085f, 0x0800, 0x08, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
/* 20 */ { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x509d, 0x0f2b, 0x085f, 0x0818, 0x00, 0x78, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x4f60, 0x0f2d, 0x0859, 0x0818, 0x00, 0x78, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x4e9d, 0x0f2d, 0x084d, 0x0818, 0x00, 0x78, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a57b4, 0x00cb948b, 0x0166, 0x543e, 0x4ddd, 0x0f2d, 0x0846, 0x0800, 0x06, 0x43, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x4da1, 0x0f2d, 0x0840, 0x0000, 0x00, 0x03, 0x000e, 0x0000, 0x0000, 0x000f, 0x0000 },
         { 0x030a5742, 0x00cb94e8, 0x0120, 0x543e, 0x4ce1, 0x0f2e, 0x0840, 0x0800, 0x07, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x4c40, 0x0f30, 0x0834, 0x6858, 0x00, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a59b7, 0x00cba0c3, 0x0000, 0x543e, 0x4ba0, 0x0f31, 0x0821, 0x0840, 0x03, 0x79, 0x0000, 0x0000, 0x0074, 0x0000, 0x0000 },
         { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x4ae0, 0x0f30, 0x081b, 0x0818, 0x00, 0x78, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5661, 0x00cb957a, 0x014f, 0x543e, 0x4a1d, 0x0f33, 0x080e, 0x0800, 0x07, 0x62, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
/* 30 */ { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x4960, 0x0f33, 0x0802, 0x0818, 0x00, 0x78, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a56b9, 0x00cb96b1, 0x00dc, 0x543e, 0x489d, 0x0f36, 0x07f5, 0x0800, 0x08, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a55b5, 0x00cb9722, 0x0000, 0x543e, 0x4760, 0x0f34, 0x07dc, 0x0800, 0x03, 0x41, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a56db, 0x00cb95d3, 0x00dd, 0x543e, 0x46a0, 0x0f39, 0x07d6, 0x0800, 0x06, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5624, 0x00cb94fc, 0x0000, 0x543e, 0x45dc, 0x0f39, 0x07d0, 0x0800, 0x03, 0x57, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5709, 0x00cb97d6, 0x007c, 0x543e, 0x4521, 0x0f37, 0x07c3, 0x0000, 0x05, 0x19, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a56c4, 0x00cb95c0, 0x00ac, 0x543e, 0x445c, 0x0f3c, 0x07d0, 0x0800, 0x06, 0xff, 0x0034, 0x000f, 0x0000, 0x00f0, 0x00f0 },
         { 0x030a5669, 0x00cb984b, 0x0000, 0x543e, 0x43a0, 0x0f3c, 0x07c9, 0x0000, 0x03, 0x35, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5742, 0x00cb94f2, 0x0012, 0x543e, 0x42dd, 0x0f3f, 0x07c9, 0x0800, 0x05, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5552, 0x00cb972f, 0x0000, 0x543e, 0x4220, 0x0f3f, 0x07b7, 0x0800, 0x03, 0x76, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
/* 40 */ { 0x030a555a, 0x00cb96d8, 0x0125, 0x543e, 0x415d, 0x0f41, 0x07b7, 0x0800, 0x05, 0x79, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a558b, 0x00cb9763, 0x010e, 0x543e, 0x40a0, 0x0f42, 0x07c3, 0x0000, 0x05, 0x2b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a55c8, 0x00cb97b8, 0x0131, 0x543e, 0x3f5d, 0x0f44, 0x07c3, 0x0800, 0x06, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5578, 0x00cb9777, 0x0000, 0x543e, 0x3e9d, 0x0f45, 0x07d0, 0x0800, 0x03, 0x43, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5412, 0x00cb9666, 0x0000, 0x543e, 0x3ddd, 0x0f44, 0x07d0, 0x0800, 0x03, 0x4a, 0x0000, 0x0000, 0x0007, 0x0000, 0x0000 },
         { 0x030a55ef, 0x00cb97c3, 0x0127, 0x543e, 0x3d20, 0x0f45, 0x07d0, 0x0800, 0x06, 0x61, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a55db, 0x00cb9724, 0x0125, 0x543e, 0x3c60, 0x0f48, 0x07d6, 0x0800, 0x05, 0x58, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a556d, 0x00cb9734, 0x013b, 0x543e, 0x3b9d, 0x0f45, 0x07d6, 0x0800, 0x06, 0x3c, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a55e7, 0x00cb9828, 0x0113, 0x543e, 0x3ae0, 0x0f48, 0x07d6, 0x0000, 0x07, 0x3a, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a559b, 0x00cb9710, 0x013c, 0x543e, 0x3a1d, 0x0f4a, 0x07dc, 0x0800, 0x06, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
/* 50 */ { 0x030a56d7, 0x00cb96d6, 0x0000, 0x543e, 0x395d, 0x0f4a, 0x07e2, 0x0800, 0x03, 0x78, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5552, 0x00cb9737, 0x012c, 0x543e, 0x38a0, 0x0f4a, 0x07dc, 0x0800, 0x05, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5569, 0x00cb96ec, 0x0000, 0x543e, 0x3760, 0x0f4e, 0x07e9, 0x0800, 0x03, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a58b0, 0x00cb95e3, 0x0000, 0x543e, 0x369d, 0x0f52, 0x07e9, 0x0800, 0x03, 0x62, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a56a2, 0x00cb963d, 0x0000, 0x543e, 0x35e0, 0x0f52, 0x07ef, 0x0800, 0x03, 0x5a, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a559e, 0x00cb96e6, 0x012d, 0x543e, 0x3520, 0x0f56, 0x07ef, 0x0800, 0x05, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a56db, 0x00cb98ef, 0x0000, 0x543e, 0x345d, 0x0f58, 0x07e9, 0x0800, 0x03, 0x78, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5637, 0x00cb9869, 0x0110, 0x543e, 0x33a0, 0x0f58, 0x07e9, 0x0000, 0x04, 0x24, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5552, 0x00cb96e3, 0x013d, 0x543e, 0x32dc, 0x0f58, 0x07f5, 0x0000, 0x06, 0x3c, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5578, 0x00cb978f, 0x0000, 0x543e, 0x321d, 0x0f56, 0x0802, 0x0000, 0x03, 0x1e, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
/* 60 */ { 0x030a5569, 0x00cb9714, 0x0141, 0x543e, 0x3160, 0x0f5b, 0x0802, 0x0800, 0x06, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5665, 0x00cb993f, 0x0000, 0x543e, 0x309d, 0x0f5c, 0x0808, 0x0800, 0x03, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a55cc, 0x00cb97fa, 0x011e, 0x543e, 0x2f61, 0x0f5c, 0x080e, 0x0800, 0x04, 0x55, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a558f, 0x00cb97d8, 0x011a, 0x543e, 0x2e9c, 0x0f5e, 0x0808, 0x0800, 0x06, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a54fa, 0x00cb960b, 0x0000, 0x543e, 0x2de1, 0x0f5e, 0x0808, 0x0000, 0x03, 0x33, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5543, 0x00cb96e3, 0x0137, 0x543e, 0x2d1c, 0x0f5f, 0x0808, 0x0800, 0x06, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a54eb, 0x00cb95a3, 0x0000, 0x543e, 0x2c5d, 0x0f5f, 0x0814, 0x0000, 0x03, 0x2c, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5593, 0x00cb9766, 0x012f, 0x543e, 0x2ba0, 0x0f62, 0x080e, 0x0800, 0x06, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a554e, 0x00cb961c, 0x0000, 0x543e, 0x2add, 0x0f67, 0x081b, 0x0800, 0x03, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x2a20, 0x0f67, 0x0814, 0x0818, 0x00, 0x78, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
/* 70 */ { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x295d, 0x0f67, 0x081b, 0x0818, 0x00, 0x78, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a52d5, 0x00cb97fc, 0x01af, 0x543e, 0x28a0, 0x0f69, 0x0827, 0x0800, 0x05, 0x75, 0x0000, 0x0000, 0x0036, 0x0000, 0x0000 },
         { 0x030a55b9, 0x00cb9709, 0x0127, 0x543e, 0x275d, 0x0f6c, 0x081b, 0x0800, 0x05, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a05cb, 0x00caf5c0, 0x0000, 0x543e, 0x26a0, 0x0f6a, 0x0827, 0x0800, 0x03, 0x78, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a55b5, 0x00cb96ab, 0x0132, 0x543e, 0x25dd, 0x0f70, 0x0827, 0x0800, 0x06, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a55c8, 0x00cb9734, 0x0126, 0x543e, 0x2520, 0x0f72, 0x0827, 0x0800, 0x04, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a573e, 0x00cb9806, 0x0000, 0x543e, 0x245d, 0x0f78, 0x082d, 0x0800, 0x03, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x239d, 0x0f76, 0x083a, 0x0818, 0x00, 0x78, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a55e7, 0x00cb976a, 0x012f, 0x543e, 0x22e0, 0x0f7b, 0x083a, 0x0800, 0x04, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x221d, 0x0f81, 0x083a, 0x0818, 0x00, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
/* 80 */ { 0x030a5701, 0x00cb9c2b, 0x0000, 0x543e, 0x2160, 0x0f80, 0x083a, 0x0800, 0x03, 0x79, 0x0000, 0x0000, 0x0021, 0x0000, 0x0000 },
         { 0x030a58e2, 0x00cb9863, 0x00f6, 0x543e, 0x20a0, 0x0f83, 0x083a, 0x0800, 0x05, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x2080, 0x0f83, 0x083a, 0x0000, 0x00, 0x02, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5602, 0x00cb9704, 0x0122, 0x543e, 0x1f40, 0x0f87, 0x0840, 0x0800, 0x05, 0xff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030b4b16, 0x00c8a656, 0x0000, 0x543e, 0x1e9d, 0x0f87, 0x083a, 0x0840, 0x03, 0x79, 0x0000, 0x0000, 0x3718, 0x0000, 0x0000 },
         { 0x030a559b, 0x00cb984f, 0x0000, 0x543e, 0x1ddd, 0x0f89, 0x0840, 0x0800, 0x03, 0x64, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x1d20, 0x0f8a, 0x0846, 0x0818, 0x00, 0x78, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x1c5d, 0x0f8a, 0x0846, 0x0818, 0x00, 0x78, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x00000000, 0x00000000, 0x0000, 0x543e, 0x1ba0, 0x0f8e, 0x084d, 0x0818, 0x00, 0x78, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a56c8, 0x00cb9f08, 0x005d, 0x543e, 0x1add, 0x0f8f, 0x084d, 0x0800, 0x04, 0x79, 0x0000, 0x0000, 0x0054, 0x0000, 0x0000 },
/* 90 */ { 0x030a54ba, 0x00cb95a9, 0x0000, 0x543e, 0x1a1d, 0x0f8f, 0x084d, 0x0000, 0x03, 0x1b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a555a, 0x00cb979b, 0x0123, 0x543e, 0x1960, 0x0f8e, 0x084d, 0x0000, 0x06, 0x22, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a5524, 0x00cb9718, 0x0129, 0x543e, 0x189d, 0x0f8e, 0x0859, 0x0800, 0x06, 0x3e, 0x0000, 0x0000, 0x0001, 0x0000, 0x0000 },
         { 0x030a554a, 0x00cb973f, 0x0000, 0x543e, 0x175d, 0x0f8f, 0x0859, 0x0000, 0x03, 0x21, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a55aa, 0x00cb97ac, 0x012b, 0x543e, 0x16a0, 0x0f8e, 0x0866, 0x0800, 0x07, 0x40, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
         { 0x030a555a, 0x00cb977a, 0x013c, 0x543e, 0x15dd, 0x0f8f, 0x0866, 0x0800, 0x06, 0x59, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
/* 96 */ { 0x030a55fa, 0x00cb9746, 0x0138, 0x543e, 0x151d, 0x0f8e, 0x0866, 0x0800, 0x06, 0x40, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }
  };

uint8_t  message[sizeof(t_SendData)];
const int msglen = sizeof(message);
const uint8_t ECC_LENGTH = 4;  //Max message lenght, and "guardian bytes", Max corrected bytes ECC_LENGTH/2
uint8_t  message_frame[msglen];    //The message size would be different, so need a container
uint8_t  repaired[msglen];
uint8_t  encoded[msglen + ECC_LENGTH];
RS::ReedSolomon<msglen, ECC_LENGTH> rs;

#define LORA_SENDER

void TestLoRa(void){
  uint8_t* data = (uint8_t*)(&loRaTestData[0]);
  t_SendData dummy;
  uint8_t* buffer = (uint8_t*)(&dummy);
  int t= millis();
  #ifdef USE_OLED
  //reset OLED display via software
  pinMode(DISPLAY_RST, OUTPUT);
  digitalWrite(OLED_RST, LOW);
  delay(40);
  digitalWrite(DISPLAY_RST, HIGH);
  //initialize OLED
  display.init();
  //display.displayOn();
  display.setTextAlignment(TEXT_ALIGN_LEFT);
  display.setFont(ArialMT_Plain_16);
  #endif


  if (SetupLoRa()){
    #ifndef LORA_SENDER
    int packetSize = 0;
    int cnt = 0;
    int overAll = 0;
    while(1){
      int x = 0;
      uint8_t ackCode = LORA_ACK_NACK;
      while(packetSize == 0){
        packetSize = LoRa.parsePacket();
        if(packetSize == 0) { delay(1); }
        x++;
        if (x > 1000) {
          if (cnt >0){
            DebugPrintln("", DEBUG_LEVEL_1);
            DebugPrintln(String(cnt) + " done in " + String(overAll) + "ms, " + String(96-cnt) + " lost."  , DEBUG_LEVEL_1);
          }
          cnt = 0;
        }
      }
      if(cnt == 0){ DebugPrintln("", DEBUG_LEVEL_1); DebugPrintln("", DEBUG_LEVEL_1); DebugPrintln("", DEBUG_LEVEL_1); t= millis(); }
      cnt++;
      //DebugPrintln("package received len: " + String(packetSize)+ " [" + String(millis()-t) + " ms]", DEBUG_LEVEL_1);
      DebugPrint(".", DEBUG_LEVEL_1);
      if (LoRa.readBytes(encoded, packetSize) != packetSize){
        DebugPrintln("could not read " + String(packetSize) + " bytes from package", DEBUG_LEVEL_1);
      } else {
        int dt = millis();
        int rc = rs.Decode(encoded, repaired);
        dt = millis() - dt;
        if (rc > 0){
          DebugPrintln("Decoding failed: " + String(rc), DEBUG_LEVEL_1);
        } else {
          ackCode = LORA_ACK_ACK;
          String corrected = "";
          for(int i = 0; i < msglen; i++) { if (encoded[i] != repaired[i]) { corrected = " - corrected!"; break; } }
          for(int i = 0; i < msglen; i++) { buffer[i] = repaired[i]; }
          //if(corrected != ""){
            DebugPrintln("No. " + String(cnt) + " - Decoding success [" + String(dt) + "] " + corrected, DEBUG_LEVEL_1);
          //}
          //_PrintDataSet(&dummy, DEBUG_LEVEL_1);
        }
      }
      sendACK(ackCode);
      packetSize = 0;
      overAll = millis()-t;
    }
    #else //LORA_SENDER
    int cnt = 0;
    int fail = 0;
    int RSSIsum = 0;
    for(int m = 0; m < TEST_DATA_COUNT; m++){
      uint8_t ackCode = LORA_ACK_NACK;
      uint8_t* data = (uint8_t*)(&loRaTestData[m]);
      for(int i = 0; i < msglen; i++) { message[i] = data[i]; } // Fill with the message
      rs.Encode(message, encoded);
      int x = 0;
      int rssi = 0;
      while((ackCode == LORA_ACK_NACK) && (x < 3)){
        fail++;
        // send packet
        LoRa.beginPacket();
        LoRa.write(encoded, sizeof(encoded));
        LoRa.endPacket();
        //DebugPrintln(String(m+1) + " packages sent [" + String(millis()-t) + " ms]", DEBUG_LEVEL_1);
        if (waitForACK(&ackCode, &rssi)){
          _DD(DebugPrintln(String(m) + ": got ACK: 0x" +  String(ackCode, HEX) + " [rssi :" + String(rssi) + ", " + String(millis()-t) + " ms]", DEBUG_LEVEL_3);)
          if(ackCode == LORA_ACK_ACK) { cnt++; RSSIsum += rssi; fail--; }
        } else {
          ackCode = LORA_ACK_NACK;
          _DD(DebugPrintln(String(m) + ": got no ACK [" + String(millis()-t) + " ms]", DEBUG_LEVEL_3);)
        }
        x++;
      }
      if(x >= 3) { DebugPrintln("package sent failed [" + String(millis()-t) + " ms]", DEBUG_LEVEL_1); }
      #ifdef USE_OLED
      display.clear();
      display.drawString(0, 0, String(m+1) + " sent");
      display.display();
      #endif
      delay(100);
    }
    DebugPrintln(String(cnt) + " packages sent successfully [" + String(millis()-t) + " ms]", DEBUG_LEVEL_1);
    if (cnt > 0) { RSSIsum /= cnt; }
    #ifdef USE_OLED
    display.clear();
    display.drawString(0, 0, String(cnt) + " good, " + String(fail) + " bad");
    display.drawString(0, 20, "rssi: "+ String(RSSIsum));
    display.drawString(0, 40, String((millis()-t) / 1000) + " sec");
    display.display();
    delay(4000);
    display.clear();
    display.displayOff();
    display.end();
    #endif
    #endif //LORA_SENDER
  }
  /*
  DebugPrintln("Original:  ", DEBUG_LEVEL_1);
  _PrintDataSet(&loRaTestData[0], DEBUG_LEVEL_1);

  for(int i = 0; i < msglen; i++) { message[i] = data[i]; } // Fill with the message
  rs.Encode(message, encoded);

  DebugPrintln("Encoded:  ", DEBUG_LEVEL_1);
  for(int i = 0; i < msglen; i++) { buffer[i] = encoded[i]; }
  _PrintDataSet(&dummy, DEBUG_LEVEL_1);


  dummy.date = (dummy.date & 0xff00);// | 0x23;
  dummy.latitude = (dummy.latitude & 0xff00ffff);// | 0x5b0000;
  DebugPrintln("Corrupted: ", DEBUG_LEVEL_1);
  _PrintDataSet(&dummy, DEBUG_LEVEL_1);
  for(int i = 0; i < msglen; i++) { encoded[i] = buffer[i]; } // Fill with the corrupted message

  int rc = rs.Decode(encoded, repaired);
  if (rc > 0){
    DebugPrintln("Decoding failed: " + String(rc), DEBUG_LEVEL_1);
  } else {
    DebugPrintln("Decoding success", DEBUG_LEVEL_1);
    for(int i = 0; i < msglen; i++) { buffer[i] = repaired[i]; }
    _PrintDataSet(&dummy, DEBUG_LEVEL_1);
  };
 */
  CloseLoRa();
}
/*
String LoRaTestStrings[] = {
  "1001010d560a030f97cb0026013e54605f190fd0080000070020000000000000000000000088fb",
  "100101c1550a031497cb0019013e549d5e190fc3080000070028000000000000000000000088fb",
  "10010174550a038a97cb0022013e54e05d1a0fbd08000006001e000000000000000000000088fb",
  "10010105560a03b897cb0026013e541d5d1a0fb108000007002e000000000000000000000088fb",
  "100101d4550a033c97cb0035013e545d5c1d0fa408000008002100ae002e000000009f00f588fb"
};

void transformTestDate(void){

 for(int i=0; i<TEST_STRINGS; i++){
   //DebugPrint("0x" + LoRaTestStrings[i].substring(0,2) + ", ", DEBUG_LEVEL_1);
   //DebugPrint("0x" + LoRaTestStrings[i].substring(2,4) + ", ", DEBUG_LEVEL_1);
   //DebugPrint("0x" + LoRaTestStrings[i].substring(4,6) + ", ", DEBUG_LEVEL_1);

   DebugPrint("{ 0x" + LoRaTestStrings[i].substring(12,14), DEBUG_LEVEL_1);
   DebugPrint(LoRaTestStrings[i].substring(10,12), DEBUG_LEVEL_1);
   DebugPrint(LoRaTestStrings[i].substring(8,10), DEBUG_LEVEL_1);
   DebugPrint(LoRaTestStrings[i].substring(6,8) + ", ", DEBUG_LEVEL_1);

   DebugPrint("0x" + LoRaTestStrings[i].substring(20,22), DEBUG_LEVEL_1);
   DebugPrint(LoRaTestStrings[i].substring(18,20), DEBUG_LEVEL_1);
   DebugPrint(LoRaTestStrings[i].substring(16,18), DEBUG_LEVEL_1);
   DebugPrint(LoRaTestStrings[i].substring(14,16) + ", ", DEBUG_LEVEL_1);
   for(int j=22; j<46; j+=4){
     DebugPrint("0x" + LoRaTestStrings[i].substring(j+2,j+4), DEBUG_LEVEL_1);
     DebugPrint(LoRaTestStrings[i].substring(j,j+2) + ", ", DEBUG_LEVEL_1);
   }
   DebugPrint("0x" + LoRaTestStrings[i].substring(46,48) + ", ", DEBUG_LEVEL_1);
   DebugPrint("0x" + LoRaTestStrings[i].substring(50,52) + ", ", DEBUG_LEVEL_1);
   for(int j=54; j<70; j+=4){
     DebugPrint("0x" + LoRaTestStrings[i].substring(j+2,j+4), DEBUG_LEVEL_1);
     DebugPrint(LoRaTestStrings[i].substring(j,j+2) + ", ", DEBUG_LEVEL_1);
   }
   DebugPrint("0x" + LoRaTestStrings[i].substring(72,74), DEBUG_LEVEL_1);
   DebugPrint(LoRaTestStrings[i].substring(70,72) + " },", DEBUG_LEVEL_1);

   DebugPrintln("", DEBUG_LEVEL_1);
 }
}
*/

#endif // HEIDI_CONFIG_TEST

#endif //USE_LORA


